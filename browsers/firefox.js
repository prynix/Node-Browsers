class Firefox {
      constructor() {
            this.storage = {
                  cookies: require(`../../cookie.js`),
                  userAgents: require(`../../UA_storage.js`),
                  referers: require(`../../referer.js`),
            }
      }
      /*      
      *
      *     WINDOW      
      *
      */
      get window() {
            return {
                  close: {},
                  stop: {},
                  focus: {},
                  blur: {},
                  open: {},
                  alert: {},
                  confirm: {},
                  prompt: {},
                  print: {},
                  showModalDialog: {},
                  postMessage: {},
                  captureEvents: {},
                  releaseEvents: {},
                  getSelection: {},
                  getComputedStyle: {},
                  matchMedia: {},
                  moveTo: {},
                  moveBy: {},
                  resizeTo: {},
                  resizeBy: {},
                  scroll: {},
                  scrollTo: {},
                  scrollBy: {},
                  requestAnimationFrame: {},
                  cancelAnimationFrame: {},
                  getDefaultComputedStyle: {},
                  scrollByLines: {},
                  scrollByPages: {},
                  sizeToContent: {},
                  updateCommands: {},
                  find: {},
                  dump: {},
                  setResizable: {},
                  btoa: {},
                  atob: {},
                  setTimeout: {},
                  clearTimeout: {},
                  setInterval: {},
                  clearInterval: {},
                  createImageBitmap: {},
                  fetch: {},
                  name: {},
                  history:
                  {
                        go: 'function go() {    [native code]}',
                        back: 'function back() {    [native code]}',
                        forward: 'function forward() {    [native code]}',
                        pushState: 'function pushState() {    [native code]}',
                        replaceState: 'function replaceState() {    [native code]}',
                        length: 2,
                        scrollRestoration: 'auto',
                        state: {}
                  },
                  locationbar: { visible: true },
                  menubar: { visible: true },
                  personalbar: { visible: true },
                  scrollbars: { visible: true },
                  statusbar: { visible: true },
                  toolbar: { visible: true },
                  status: {},
                  closed: {},
                  length: {},
                  opener: {},
                  frameElement: {},
                  navigator:
                  {
                        vibrate: 'function vibrate() {    [native code]}',
                        javaEnabled: 'function javaEnabled() {    [native code]}',
                        getGamepads: 'function getGamepads() {    [native code]}',
                        mozGetUserMedia: 'function mozGetUserMedia() {    [native code]}',
                        sendBeacon: 'function sendBeacon() {    [native code]}',
                        requestMediaKeySystemAccess: 'function requestMediaKeySystemAccess() {    [native code]}',
                        registerProtocolHandler: 'function registerProtocolHandler() {    [native code]}',
                        registerContentHandler: 'function registerContentHandler() {    [native code]}',
                        taintEnabled: 'function taintEnabled() {    [native code]}',
                        permissions: {},
                        mimeTypes: {},
                        doNotTrack: 'unspecified',
                        oscpu: 'Linux x86_64',
                        vendor: '',
                        vendorSub: '',
                        productSub: '20100101',
                        cookieEnabled: true,
                        buildID: '20170329150444',
                        hardwareConcurrency: 4,
                        appCodeName: 'Mozilla',
                        appName: 'Netscape',
                        appVersion: '5.0 (X11)',
                        platform: 'Linux x86_64',
                        userAgent: 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0',
                        product: 'Gecko',
                        language: 'ru-RU',
                        languages:
                        [{ '0': 'r', '1': 'u', '2': '-', '3': 'R', '4': 'U' },
                        { '0': 'r', '1': 'u' },
                        { '0': 'e', '1': 'n', '2': '-', '3': 'U', '4': 'S' },
                        { '0': 'e', '1': 'n' }],
                        onLine: true
                  },
                  external:
                  {
                        AddSearchProvider: 'function AddSearchProvider() {    [native code]}',
                        IsSearchProviderInstalled: 'function IsSearchProviderInstalled() {    [native code]}',
                        addSearchEngine: 'function addSearchEngine() {    [native code]}'
                  },
                  applicationCache:
                  {
                        update: 'function update() {    [native code]}',
                        swapCache: 'function swapCache() {    [native code]}',
                        mozHasItem: 'function mozHasItem() {    [native code]}',
                        mozItem: 'function mozItem() {    [native code]}',
                        mozAdd: 'function mozAdd() {    [native code]}',
                        mozRemove: 'function mozRemove() {    [native code]}',
                        status: 0,
                        onchecking: {},
                        onerror: {},
                        mozLength: 0,
                        UNCACHED: 0,
                        IDLE: 1,
                        CHECKING: 2,
                        DOWNLOADING: 3,
                        UPDATEREADY: 4,
                        OBSOLETE: 5,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  screen:
                  {
                        mozLockOrientation: 'function mozLockOrientation() {    [native code]}',
                        mozUnlockOrientation: 'function mozUnlockOrientation() {    [native code]}',
                        availWidth: 1680,
                        availHeight: 1050,
                        width: 1680,
                        height: 1050,
                        colorDepth: 24,
                        pixelDepth: 24,
                        top: 30,
                        left: 0,
                        availTop: 30,
                        availLeft: 0,
                        mozOrientation: 'landscape-primary',
                        onmozorientationchange: {},
                        orientation: {},
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  innerWidth: {},
                  innerHeight: {},
                  scrollX: {},
                  pageXOffset: {},
                  scrollY: {},
                  pageYOffset: {},
                  screenX: {},
                  screenY: {},
                  outerWidth: {},
                  outerHeight: {},
                  performance:
                  {
                        now: 'function now() {    [native code]}',
                        getEntries: 'function getEntries() {    [native code]}',
                        getEntriesByType: 'function getEntriesByType() {    [native code]}',
                        getEntriesByName: 'function getEntriesByName() {    [native code]}',
                        clearResourceTimings: 'function clearResourceTimings() {    [native code]}',
                        setResourceTimingBufferSize: 'function setResourceTimingBufferSize() {    [native code]}',
                        mark: 'function mark() {    [native code]}',
                        clearMarks: 'function clearMarks() {    [native code]}',
                        measure: 'function measure() {    [native code]}',
                        clearMeasures: 'function clearMeasures() {    [native code]}',
                        toJSON: 'function toJSON() {    [native code]}',
                        timing: {},
                        navigation: {}
                  },
                  mozInnerScreenX: {},
                  mozInnerScreenY: {},
                  devicePixelRatio: {},
                  scrollMaxX: {},
                  scrollMaxY: {},
                  fullScreen: {},
                  mozPaintCount: {},
                  onwheel: {},
                  ondevicemotion: {},
                  ondeviceorientation: {},
                  onabsolutedeviceorientation: {},
                  ondeviceproximity: {},
                  onuserproximity: {},
                  ondevicelight: {},
                  sidebar:
                  {
                        AddSearchProvider: 'function AddSearchProvider() {    [native code]}',
                        IsSearchProviderInstalled: 'function IsSearchProviderInstalled() {    [native code]}',
                        addSearchEngine: 'function addSearchEngine() {    [native code]}'
                  },
                  crypto:
                  {
                        getRandomValues: 'function getRandomValues() {    [native code]}',
                        subtle: {}
                  },
                  onabort: {},
                  onblur: {},
                  onfocus: {},
                  oncanplay: {},
                  oncanplaythrough: {},
                  onchange: {},
                  onclick: {},
                  oncontextmenu: {},
                  ondblclick: {},
                  ondrag: {},
                  ondragend: {},
                  ondragenter: {},
                  ondragexit: {},
                  ondragleave: {},
                  ondragover: {},
                  ondragstart: {},
                  ondrop: {},
                  ondurationchange: {},
                  onemptied: {},
                  onended: {},
                  oninput: {},
                  oninvalid: {},
                  onkeydown: {},
                  onkeypress: {},
                  onkeyup: {},
                  onload: {},
                  onloadeddata: {},
                  onloadedmetadata: {},
                  onloadend: {},
                  onloadstart: {},
                  onmousedown: {},
                  onmouseenter: {},
                  onmouseleave: {},
                  onmousemove: {},
                  onmouseout: {},
                  onmouseover: {},
                  onmouseup: {},
                  onpause: {},
                  onplay: {},
                  onplaying: {},
                  onprogress: {},
                  onratechange: {},
                  onreset: {},
                  onresize: {},
                  onscroll: {},
                  onseeked: {},
                  onseeking: {},
                  onselect: {},
                  onshow: {},
                  onstalled: {},
                  onsubmit: {},
                  onsuspend: {},
                  ontimeupdate: {},
                  onvolumechange: {},
                  onwaiting: {},
                  onselectstart: {},
                  ontoggle: {},
                  onmozfullscreenchange: {},
                  onmozfullscreenerror: {},
                  onanimationend: {},
                  onanimationiteration: {},
                  onanimationstart: {},
                  ontransitionend: {},
                  onwebkitanimationend: {},
                  onwebkitanimationiteration: {},
                  onwebkitanimationstart: {},
                  onwebkittransitionend: {},
                  onerror: {},
                  speechSynthesis:
                  {
                        speak: 'function speak() {    [native code]}',
                        cancel: 'function cancel() {    [native code]}',
                        pause: 'function pause() {    [native code]}',
                        resume: 'function resume() {    [native code]}',
                        getVoices: 'function getVoices() {    [native code]}',
                        pending: false,
                        speaking: false,
                        paused: false,
                        onvoiceschanged: {},
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  onafterprint: {},
                  onbeforeprint: {},
                  onbeforeunload: {},
                  onhashchange: {},
                  onlanguagechange: {},
                  onmessage: {},
                  onoffline: {},
                  ononline: {},
                  onpagehide: {},
                  onpageshow: {},
                  onpopstate: {},
                  onstorage: {},
                  onunload: {},
                  localStorage:
                  {
                        _ym42409674_reqNum: '5',
                        _ym42409674_lsid: '695037231431',
                        _ym_retryReqs: '{"1":{"protocol":"https:","host":"mc.yandex.ru","resource":"webvisor","counterId":42409674,"counterType":0,"postParams":["wv-data"],"params":{"rn":943263493,"page-url":"http://localhost:3000/startups.html","wmode":0,"wv-type":0,"wv-hit":167799279,"wv-part":12,"wv-check":3341,"wv-data":"DQ__"},"browserInfo":{"z":420,"i":"20170211173050","rqnl":1},"ghid":823469272,"time":1486809247862}}',
                        google_pub_config: '{"sraConfigs":{"1":{"sraTimeout":10000},"2":{"sraTimeout":10000}}}',
                        google_experiment_mod: '171',
                        _ym42409674_lastHit: '1486809050967',
                        key: 'function key() {    [native code]}',
                        getItem: 'function getItem() {    [native code]}',
                        setItem: 'function setItem() {    [native code]}',
                        removeItem: 'function removeItem() {    [native code]}',
                        clear: 'function clear() {    [native code]}',
                        length: 6
                  },
                  isSecureContext: {},
                  indexedDB:
                  {
                        open: 'function open() {    [native code]}',
                        deleteDatabase: 'function deleteDatabase() {    [native code]}',
                        cmp: 'function cmp() {    [native code]}'
                  },
                  caches:
                  {
                        match: 'function match() {    [native code]}',
                        has: 'function has() {    [native code]}',
                        open: 'function open() {    [native code]}',
                        delete: 'function delete() {    [native code]}',
                        keys: 'function keys() {    [native code]}'
                  },
                  sessionStorage:
                  {
                        key: 'function key() {    [native code]}',
                        getItem: 'function getItem() {    [native code]}',
                        setItem: 'function setItem() {    [native code]}',
                        removeItem: 'function removeItem() {    [native code]}',
                        clear: 'function clear() {    [native code]}',
                        length: 0
                  },
                  location:
                  {
                        href: 'http://localhost:3000/',
                        origin: 'http://localhost:3000',
                        protocol: 'http:',
                        host: 'localhost:3000',
                        hostname: 'localhost',
                        port: '3000',
                        pathname: '/',
                        search: '',
                        hash: '',
                        assign: 'function assign() {    [native code]}',
                        replace: 'function replace() {    [native code]}',
                        reload: 'function reload() {    [native code]}',
                        toString: 'function toString() {    [native code]}',
                        valueOf: 'function valueOf() {    [native code]}',
                        toJSON: 'undefined'
                  },
                  io:
                  {
                        managers: {},
                        protocol: 4,
                        connect: 'function n(t,e){"object"===("undefined"==typeof t?"undefined":i(t))&&(e=t,t=void 0),e=e||{};var r,n=s(t),a=n.source,p=n.id,f=n.path,l=h[p]&&f in h[p].nsps,d=e.forceNew||e["force new connection"]||!1===e.multiplex||l;return d?(u("ignoring socket cache for %s",a),r=c(a,e)):(h[p]||(u("new io instance for %s",a),h[p]=c(a,e)),r=h[p]),n.query&&!e.query?e.query=n.query:e&&"object"===i(e.query)&&(e.query=o(e.query)),r.socket(n.path,e)}',
                        Manager: 'function n(t,e){return this instanceof n?(t&&"object"===("undefined"==typeof t?"undefined":o(t))&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new l({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[],this.encoder=new c.Encoder,this.decoder=new c.Decoder,this.autoConnect=e.autoConnect!==!1,void(this.autoConnect&&this.open())):new n(t,e)}',
                        Socket: 'function n(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}'
                  },
                  windowPropertiesStorage:
                  {
                        '0': 'close',
                        '1': 'stop',
                        '2': 'focus',
                        '3': 'blur',
                        '4': 'open',
                        '5': 'alert',
                        '6': 'confirm',
                        '7': 'prompt',
                        '8': 'print',
                        '9': 'showModalDialog',
                        '10': 'postMessage',
                        '11': 'captureEvents',
                        '12': 'releaseEvents',
                        '13': 'getSelection',
                        '14': 'getComputedStyle',
                        '15': 'matchMedia',
                        '16': 'moveTo',
                        '17': 'moveBy',
                        '18': 'resizeTo',
                        '19': 'resizeBy',
                        '20': 'scroll',
                        '21': 'scrollTo',
                        '22': 'scrollBy',
                        '23': 'requestAnimationFrame',
                        '24': 'cancelAnimationFrame',
                        '25': 'getDefaultComputedStyle',
                        '26': 'scrollByLines',
                        '27': 'scrollByPages',
                        '28': 'sizeToContent',
                        '29': 'updateCommands',
                        '30': 'find',
                        '31': 'dump',
                        '32': 'setResizable',
                        '33': 'btoa',
                        '34': 'atob',
                        '35': 'setTimeout',
                        '36': 'clearTimeout',
                        '37': 'setInterval',
                        '38': 'clearInterval',
                        '39': 'createImageBitmap',
                        '40': 'fetch',
                        '41': 'self',
                        '42': 'name',
                        '43': 'history',
                        '44': 'locationbar',
                        '45': 'menubar',
                        '46': 'personalbar',
                        '47': 'scrollbars',
                        '48': 'statusbar',
                        '49': 'toolbar',
                        '50': 'status',
                        '51': 'closed',
                        '52': 'frames',
                        '53': 'length',
                        '54': 'opener',
                        '55': 'parent',
                        '56': 'frameElement',
                        '57': 'navigator',
                        '58': 'external',
                        '59': 'applicationCache',
                        '60': 'screen',
                        '61': 'innerWidth',
                        '62': 'innerHeight',
                        '63': 'scrollX',
                        '64': 'pageXOffset',
                        '65': 'scrollY',
                        '66': 'pageYOffset',
                        '67': 'screenX',
                        '68': 'screenY',
                        '69': 'outerWidth',
                        '70': 'outerHeight',
                        '71': 'performance',
                        '72': 'mozInnerScreenX',
                        '73': 'mozInnerScreenY',
                        '74': 'devicePixelRatio',
                        '75': 'scrollMaxX',
                        '76': 'scrollMaxY',
                        '77': 'fullScreen',
                        '78': 'mozPaintCount',
                        '79': 'onwheel',
                        '80': 'ondevicemotion',
                        '81': 'ondeviceorientation',
                        '82': 'onabsolutedeviceorientation',
                        '83': 'ondeviceproximity',
                        '84': 'onuserproximity',
                        '85': 'ondevicelight',
                        '86': 'content',
                        '87': 'sidebar',
                        '88': 'crypto',
                        '89': 'onabort',
                        '90': 'onblur',
                        '91': 'onfocus',
                        '92': 'oncanplay',
                        '93': 'oncanplaythrough',
                        '94': 'onchange',
                        '95': 'onclick',
                        '96': 'oncontextmenu',
                        '97': 'ondblclick',
                        '98': 'ondrag',
                        '99': 'ondragend',
                        '100': 'ondragenter',
                        '101': 'ondragexit',
                        '102': 'ondragleave',
                        '103': 'ondragover',
                        '104': 'ondragstart',
                        '105': 'ondrop',
                        '106': 'ondurationchange',
                        '107': 'onemptied',
                        '108': 'onended',
                        '109': 'oninput',
                        '110': 'oninvalid',
                        '111': 'onkeydown',
                        '112': 'onkeypress',
                        '113': 'onkeyup',
                        '114': 'onload',
                        '115': 'onloadeddata',
                        '116': 'onloadedmetadata',
                        '117': 'onloadend',
                        '118': 'onloadstart',
                        '119': 'onmousedown',
                        '120': 'onmouseenter',
                        '121': 'onmouseleave',
                        '122': 'onmousemove',
                        '123': 'onmouseout',
                        '124': 'onmouseover',
                        '125': 'onmouseup',
                        '126': 'onpause',
                        '127': 'onplay',
                        '128': 'onplaying',
                        '129': 'onprogress',
                        '130': 'onratechange',
                        '131': 'onreset',
                        '132': 'onresize',
                        '133': 'onscroll',
                        '134': 'onseeked',
                        '135': 'onseeking',
                        '136': 'onselect',
                        '137': 'onshow',
                        '138': 'onstalled',
                        '139': 'onsubmit',
                        '140': 'onsuspend',
                        '141': 'ontimeupdate',
                        '142': 'onvolumechange',
                        '143': 'onwaiting',
                        '144': 'onselectstart',
                        '145': 'ontoggle',
                        '146': 'onmozfullscreenchange',
                        '147': 'onmozfullscreenerror',
                        '148': 'onanimationend',
                        '149': 'onanimationiteration',
                        '150': 'onanimationstart',
                        '151': 'ontransitionend',
                        '152': 'onwebkitanimationend',
                        '153': 'onwebkitanimationiteration',
                        '154': 'onwebkitanimationstart',
                        '155': 'onwebkittransitionend',
                        '156': 'onerror',
                        '157': 'speechSynthesis',
                        '158': 'onafterprint',
                        '159': 'onbeforeprint',
                        '160': 'onbeforeunload',
                        '161': 'onhashchange',
                        '162': 'onlanguagechange',
                        '163': 'onmessage',
                        '164': 'onoffline',
                        '165': 'ononline',
                        '166': 'onpagehide',
                        '167': 'onpageshow',
                        '168': 'onpopstate',
                        '169': 'onstorage',
                        '170': 'onunload',
                        '171': 'localStorage',
                        '172': 'isSecureContext',
                        '173': 'indexedDB',
                        '174': 'caches',
                        '175': 'sessionStorage',
                        '176': 'window',
                        '177': 'document',
                        '178': 'location',
                        '179': 'top',
                        '180': 'io',
                        '181': 'synteticWindow',
                        '182': 'windowPropertiesStorage',
                        '183': 'synteticDocument',
                        '184': 'documentPropertiesStorage',
                        '185': 'socket',
                        '186': 'inspect',
                        '187': '_window',
                        '188': '_document',
                        '189': 'InstallTrigger',
                        '190': 'addEventListener',
                        '191': 'removeEventListener',
                        '192': 'dispatchEvent'
                  },
                  synteticDocument: {},
                  documentPropertiesStorage: {},
                  socket: {},
                  inspect: {},
                  _window: {},
                  _document: {},
                  InstallTrigger:
                  {
                        enabled: 'function enabled() {    [native code]}',
                        updateEnabled: 'function updateEnabled() {    [native code]}',
                        install: 'function install() {    [native code]}',
                        installChrome: 'function installChrome() {    [native code]}',
                        startSoftwareUpdate: 'function startSoftwareUpdate() {    [native code]}',
                        SKIN: 1,
                        LOCALE: 2,
                        CONTENT: 4,
                        PACKAGE: 7
                  },
                  addEventListener: {},
                  removeEventListener: {},
                  dispatchEvent: {}
            }
      }
      /*      
      *
      *     DOCUMENT      
      *
      */
      get document() {
            return {
                  location:
                  {
                        href: 'http://localhost:3000/',
                        origin: 'http://localhost:3000',
                        protocol: 'http:',
                        host: 'localhost:3000',
                        hostname: 'localhost',
                        port: '3000',
                        pathname: '/',
                        search: '',
                        hash: '',
                        assign: 'function assign() {    [native code]}',
                        replace: 'function replace() {    [native code]}',
                        reload: 'function reload() {    [native code]}',
                        toString: 'function toString() {    [native code]}',
                        valueOf: 'function valueOf() {    [native code]}',
                        toJSON: 'undefined'
                  },
                  getElementsByName: {},
                  open: {},
                  close: {},
                  write: {},
                  writeln: {},
                  execCommand: {},
                  queryCommandEnabled: {},
                  queryCommandIndeterm: {},
                  queryCommandState: {},
                  queryCommandSupported: {},
                  queryCommandValue: {},
                  clear: {},
                  getSelection: {},
                  captureEvents: {},
                  releaseEvents: {},
                  domain:
                  {
                        '0': 'l',
                        '1': 'o',
                        '2': 'c',
                        '3': 'a',
                        '4': 'l',
                        '5': 'h',
                        '6': 'o',
                        '7': 's',
                        '8': 't'
                  },
                  cookie:
                  {
                        '0': '_',
                        '1': 'y',
                        '2': 'm',
                        '3': '_',
                        '4': 'u',
                        '5': 'i',
                        '6': 'd',
                        '7': '=',
                        '8': '1',
                        '9': '4',
                        '10': '8',
                        '11': '6',
                        '12': '8',
                        '13': '0',
                        '14': '8',
                        '15': '3',
                        '16': '1',
                        '17': '9',
                        '18': '1',
                        '19': '0',
                        '20': '4',
                        '21': '3',
                        '22': '5',
                        '23': '1',
                        '24': '9',
                        '25': '7',
                        '26': '9',
                        '27': '0',
                        '28': ';',
                        '29': ' ',
                        '30': '_',
                        '31': 'g',
                        '32': 'a',
                        '33': '=',
                        '34': 'G',
                        '35': 'A',
                        '36': '1',
                        '37': '.',
                        '38': '1',
                        '39': '.',
                        '40': '7',
                        '41': '4',
                        '42': '9',
                        '43': '2',
                        '44': '1',
                        '45': '7',
                        '46': '4',
                        '47': '4',
                        '48': '5',
                        '49': '.',
                        '50': '1',
                        '51': '4',
                        '52': '8',
                        '53': '6',
                        '54': '8',
                        '55': '0',
                        '56': '8',
                        '57': '3',
                        '58': '2',
                        '59': '0'
                  },
                  body:
                  {
                        text: '',
                        link: '',
                        vLink: '',
                        aLink: '',
                        bgColor: '',
                        background: '',
                        onafterprint: {},
                        onbeforeprint: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: '',
                        dir: '',
                        innerText: '',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 1599,
                        offsetHeight: 0,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'body',
                        tagName: 'BODY',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 1599,
                        scrollHeight: 0,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 1599,
                        clientHeight: 0,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '<script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script>',
                        outerHTML: '<body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        childElementCount: 1,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'BODY',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  head:
                  {
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: '',
                        dir: '',
                        dataset: {},
                        innerText: '            666         ',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        contextMenu: {},
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 0,
                        offsetHeight: 0,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'head',
                        tagName: 'HEAD',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 0,
                        scrollHeight: 0,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 0,
                        clientHeight: 0,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script>',
                        outerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head>',
                        childElementCount: 3,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'HEAD',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '            666         ',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  images:
                  {
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 0
                  },
                  embeds:
                  {
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 0
                  },
                  plugins:
                  {
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 0
                  },
                  links:
                  {
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 0
                  },
                  forms:
                  {
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 0
                  },
                  scripts:
                  {
                        '0': {},
                        '1': {},
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 2
                  },
                  designMode: { '0': 'o', '1': 'f', '2': 'f' },
                  fgColor: {},
                  linkColor: {},
                  vlinkColor: {},
                  alinkColor: {},
                  bgColor: {},
                  anchors:
                  {
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 0
                  },
                  applets:
                  {
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 0
                  },
                  all:
                  {
                        '0': {},
                        '1': {},
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 7
                  },
                  getElementsByTagName: {},
                  getElementsByTagNameNS: {},
                  getElementsByClassName: {},
                  getElementById: {},
                  createElement: {},
                  createElementNS: {},
                  createDocumentFragment: {},
                  createTextNode: {},
                  createComment: {},
                  createProcessingInstruction: {},
                  importNode: {},
                  adoptNode: {},
                  createEvent: {},
                  createRange: {},
                  createNodeIterator: {},
                  createTreeWalker: {},
                  createCDATASection: {},
                  createAttribute: {},
                  createAttributeNS: {},
                  hasFocus: {},
                  releaseCapture: {},
                  mozSetImageElement: {},
                  mozCancelFullScreen: {},
                  exitPointerLock: {},
                  enableStyleSheetsForSet: {},
                  elementFromPoint: {},
                  elementsFromPoint: {},
                  caretPositionFromPoint: {},
                  querySelector: {},
                  querySelectorAll: {},
                  prepend: {},
                  append: {},
                  createExpression: {},
                  createNSResolver: {},
                  evaluate: {},
                  implementation:
                  {
                        hasFeature: 'function hasFeature() {    [native code]}',
                        createDocumentType: 'function createDocumentType() {    [native code]}',
                        createDocument: 'function createDocument() {    [native code]}',
                        createHTMLDocument: 'function createHTMLDocument() {    [native code]}'
                  },
                  URL:
                  {
                        '0': 'h',
                        '1': 't',
                        '2': 't',
                        '3': 'p',
                        '4': ':',
                        '5': '/',
                        '6': '/',
                        '7': 'l',
                        '8': 'o',
                        '9': 'c',
                        '10': 'a',
                        '11': 'l',
                        '12': 'h',
                        '13': 'o',
                        '14': 's',
                        '15': 't',
                        '16': ':',
                        '17': '3',
                        '18': '0',
                        '19': '0',
                        '20': '0',
                        '21': '/'
                  },
                  documentURI:
                  {
                        '0': 'h',
                        '1': 't',
                        '2': 't',
                        '3': 'p',
                        '4': ':',
                        '5': '/',
                        '6': '/',
                        '7': 'l',
                        '8': 'o',
                        '9': 'c',
                        '10': 'a',
                        '11': 'l',
                        '12': 'h',
                        '13': 'o',
                        '14': 's',
                        '15': 't',
                        '16': ':',
                        '17': '3',
                        '18': '0',
                        '19': '0',
                        '20': '0',
                        '21': '/'
                  },
                  compatMode:
                  {
                        '0': 'C',
                        '1': 'S',
                        '2': 'S',
                        '3': '1',
                        '4': 'C',
                        '5': 'o',
                        '6': 'm',
                        '7': 'p',
                        '8': 'a',
                        '9': 't'
                  },
                  characterSet: { '0': 'U', '1': 'T', '2': 'F', '3': '-', '4': '8' },
                  charset: { '0': 'U', '1': 'T', '2': 'F', '3': '-', '4': '8' },
                  inputEncoding: { '0': 'U', '1': 'T', '2': 'F', '3': '-', '4': '8' },
                  contentType:
                  {
                        '0': 't',
                        '1': 'e',
                        '2': 'x',
                        '3': 't',
                        '4': '/',
                        '5': 'h',
                        '6': 't',
                        '7': 'm',
                        '8': 'l'
                  },
                  doctype:
                  {
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        name: 'html',
                        publicId: '',
                        systemId: '',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 10,
                        nodeName: 'html',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        ownerDocument: {},
                        parentNode: {},
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  documentElement:
                  {
                        version: '',
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: 'en',
                        dir: '',
                        dataset: {},
                        innerText: '',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        contextMenu: {},
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 1615,
                        offsetHeight: 8,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        tagName: 'HTML',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 1615,
                        scrollHeight: 955,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 1615,
                        clientHeight: 955,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        childElementCount: 2,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'HTML',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  referrer: {},
                  lastModified:
                  {
                        '0': '0',
                        '1': '4',
                        '2': '/',
                        '3': '0',
                        '4': '7',
                        '5': '/',
                        '6': '2',
                        '7': '0',
                        '8': '1',
                        '9': '7',
                        '10': ' ',
                        '11': '0',
                        '12': '0',
                        '13': ':',
                        '14': '4',
                        '15': '4',
                        '16': ':',
                        '17': '1',
                        '18': '3'
                  },
                  readyState:
                  {
                        '0': 'l',
                        '1': 'o',
                        '2': 'a',
                        '3': 'd',
                        '4': 'i',
                        '5': 'n',
                        '6': 'g'
                  },
                  title: { '0': '6', '1': '6', '2': '6' },
                  dir: {},
                  activeElement:
                  {
                        text: '',
                        link: '',
                        vLink: '',
                        aLink: '',
                        bgColor: '',
                        background: '',
                        onafterprint: {},
                        onbeforeprint: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: '',
                        dir: '',
                        innerText: '',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 1599,
                        offsetHeight: 0,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'body',
                        tagName: 'BODY',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 1599,
                        scrollHeight: 0,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 1599,
                        clientHeight: 0,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '<script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script>',
                        outerHTML: '<body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        childElementCount: 1,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'BODY',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  onreadystatechange: {},
                  onwheel: {},
                  oncopy: {},
                  oncut: {},
                  onpaste: {},
                  onbeforescriptexecute: {},
                  onafterscriptexecute: {},
                  onselectionchange: {},
                  currentScript:
                  {
                        src: '',
                        type: '',
                        charset: '',
                        async: false,
                        defer: false,
                        crossOrigin: {},
                        text: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        event: '',
                        htmlFor: '',
                        integrity: '',
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: '',
                        dir: '',
                        dataset: {},
                        innerText: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 0,
                        offsetHeight: 0,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'script',
                        tagName: 'SCRIPT',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 0,
                        scrollHeight: 0,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 0,
                        clientHeight: 0,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        outerHTML: '<script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script>',
                        childElementCount: 0,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'SCRIPT',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  mozFullScreen: {},
                  mozFullScreenEnabled: {},
                  mozFullScreenElement: {},
                  pointerLockElement: {},
                  onpointerlockchange: {},
                  onpointerlockerror: {},
                  hidden: {},
                  visibilityState:
                  {
                        '0': 'v',
                        '1': 'i',
                        '2': 's',
                        '3': 'i',
                        '4': 'b',
                        '5': 'l',
                        '6': 'e'
                  },
                  styleSheets: { item: 'function item() {    [native code]}', length: 0 },
                  selectedStyleSheetSet: {},
                  lastStyleSheetSet: {},
                  preferredStyleSheetSet: {},
                  styleSheetSets:
                  {
                        item: 'function item() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        length: 0
                  },
                  scrollingElement:
                  {
                        version: '',
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: 'en',
                        dir: '',
                        dataset: {},
                        innerText: '',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        contextMenu: {},
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 1615,
                        offsetHeight: 8,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        tagName: 'HTML',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 1615,
                        scrollHeight: 955,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 1615,
                        clientHeight: 955,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        childElementCount: 2,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'HTML',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  rootElement: {},
                  fonts:
                  {
                        add: 'function add() {    [native code]}',
                        has: 'function has() {    [native code]}',
                        delete: 'function delete() {    [native code]}',
                        clear: 'function clear() {    [native code]}',
                        entries: 'function entries() {    [native code]}',
                        values: 'function values() {    [native code]}',
                        forEach: 'function forEach() {    [native code]}',
                        load: 'function load() {    [native code]}',
                        check: 'function check() {    [native code]}',
                        size: 0,
                        onloading: {},
                        onloadingdone: {},
                        status: 'loaded',
                        keys: 'function values() {    [native code]}',
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  onabort: {},
                  onblur: {},
                  onfocus: {},
                  oncanplay: {},
                  oncanplaythrough: {},
                  onchange: {},
                  onclick: {},
                  oncontextmenu: {},
                  ondblclick: {},
                  ondrag: {},
                  ondragend: {},
                  ondragenter: {},
                  ondragexit: {},
                  ondragleave: {},
                  ondragover: {},
                  ondragstart: {},
                  ondrop: {},
                  ondurationchange: {},
                  onemptied: {},
                  onended: {},
                  oninput: {},
                  oninvalid: {},
                  onkeydown: {},
                  onkeypress: {},
                  onkeyup: {},
                  onload: {},
                  onloadeddata: {},
                  onloadedmetadata: {},
                  onloadend: {},
                  onloadstart: {},
                  onmousedown: {},
                  onmouseenter: {},
                  onmouseleave: {},
                  onmousemove: {},
                  onmouseout: {},
                  onmouseover: {},
                  onmouseup: {},
                  onpause: {},
                  onplay: {},
                  onplaying: {},
                  onprogress: {},
                  onratechange: {},
                  onreset: {},
                  onresize: {},
                  onscroll: {},
                  onseeked: {},
                  onseeking: {},
                  onselect: {},
                  onshow: {},
                  onstalled: {},
                  onsubmit: {},
                  onsuspend: {},
                  ontimeupdate: {},
                  onvolumechange: {},
                  onwaiting: {},
                  onselectstart: {},
                  ontoggle: {},
                  onmozfullscreenchange: {},
                  onmozfullscreenerror: {},
                  onanimationend: {},
                  onanimationiteration: {},
                  onanimationstart: {},
                  ontransitionend: {},
                  onwebkitanimationend: {},
                  onwebkitanimationiteration: {},
                  onwebkitanimationstart: {},
                  onwebkittransitionend: {},
                  onerror: {},
                  children:
                  {
                        '0': {},
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        length: 1
                  },
                  firstElementChild:
                  {
                        version: '',
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: 'en',
                        dir: '',
                        dataset: {},
                        innerText: '',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        contextMenu: {},
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 1615,
                        offsetHeight: 8,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        tagName: 'HTML',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 1615,
                        scrollHeight: 955,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 1615,
                        clientHeight: 955,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        childElementCount: 2,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'HTML',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  lastElementChild:
                  {
                        version: '',
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: 'en',
                        dir: '',
                        dataset: {},
                        innerText: '',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        contextMenu: {},
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 1615,
                        offsetHeight: 8,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        tagName: 'HTML',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 1615,
                        scrollHeight: 955,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 1615,
                        clientHeight: 955,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        childElementCount: 2,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'HTML',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  childElementCount: {},
                  hasChildNodes: {},
                  insertBefore: {},
                  appendChild: {},
                  replaceChild: {},
                  removeChild: {},
                  normalize: {},
                  cloneNode: {},
                  isSameNode: {},
                  isEqualNode: {},
                  compareDocumentPosition: {},
                  contains: {},
                  lookupPrefix: {},
                  lookupNamespaceURI: {},
                  isDefaultNamespace: {},
                  nodeType: {},
                  nodeName:
                  {
                        '0': '#',
                        '1': 'd',
                        '2': 'o',
                        '3': 'c',
                        '4': 'u',
                        '5': 'm',
                        '6': 'e',
                        '7': 'n',
                        '8': 't'
                  },
                  baseURI:
                  {
                        '0': 'h',
                        '1': 't',
                        '2': 't',
                        '3': 'p',
                        '4': ':',
                        '5': '/',
                        '6': '/',
                        '7': 'l',
                        '8': 'o',
                        '9': 'c',
                        '10': 'a',
                        '11': 'l',
                        '12': 'h',
                        '13': 'o',
                        '14': 's',
                        '15': 't',
                        '16': ':',
                        '17': '3',
                        '18': '0',
                        '19': '0',
                        '20': '0',
                        '21': '/'
                  },
                  isConnected: {},
                  ownerDocument: {},
                  parentNode: {},
                  parentElement: {},
                  childNodes:
                  {
                        '0': {},
                        '1': {},
                        item: 'function item() {    [native code]}',
                        keys: 'function keys() {    [native code]}',
                        values: 'function values() {    [native code]}',
                        entries: 'function entries() {    [native code]}',
                        forEach: 'function forEach() {    [native code]}',
                        length: 2
                  },
                  firstChild:
                  {
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        name: 'html',
                        publicId: '',
                        systemId: '',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 10,
                        nodeName: 'html',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        ownerDocument: {},
                        parentNode: {},
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  lastChild:
                  {
                        version: '',
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        title: '',
                        lang: 'en',
                        dir: '',
                        dataset: {},
                        innerText: '',
                        hidden: false,
                        tabIndex: -1,
                        accessKey: '',
                        accessKeyLabel: '',
                        draggable: false,
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        contextMenu: {},
                        spellcheck: false,
                        offsetTop: 0,
                        offsetLeft: 0,
                        offsetWidth: 1615,
                        offsetHeight: 8,
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getAttribute: 'function getAttribute() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        mozMatchesSelector: 'function mozMatchesSelector() {    [native code]}',
                        setCapture: 'function setCapture() {    [native code]}',
                        releaseCapture: 'function releaseCapture() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        mozRequestFullScreen: 'function mozRequestFullScreen() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        animate: 'function animate() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        tagName: 'HTML',
                        id: '',
                        className: '',
                        scrollTop: 0,
                        scrollLeft: 0,
                        scrollWidth: 1615,
                        scrollHeight: 955,
                        clientTop: 0,
                        clientLeft: 0,
                        clientWidth: 1615,
                        clientHeight: 955,
                        scrollTopMax: 0,
                        scrollLeftMax: 0,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        childElementCount: 2,
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        insertBefore: 'function insertBefore() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        nodeType: 1,
                        nodeName: 'HTML',
                        baseURI: 'http://localhost:3000/',
                        isConnected: true,
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  previousSibling: {},
                  nextSibling: {},
                  nodeValue: {},
                  textContent: {},
                  ELEMENT_NODE: {},
                  ATTRIBUTE_NODE: {},
                  TEXT_NODE: {},
                  CDATA_SECTION_NODE: {},
                  ENTITY_REFERENCE_NODE: {},
                  ENTITY_NODE: {},
                  PROCESSING_INSTRUCTION_NODE: {},
                  COMMENT_NODE: {},
                  DOCUMENT_NODE: {},
                  DOCUMENT_TYPE_NODE: {},
                  DOCUMENT_FRAGMENT_NODE: {},
                  NOTATION_NODE: {},
                  DOCUMENT_POSITION_DISCONNECTED: {},
                  DOCUMENT_POSITION_PRECEDING: {},
                  DOCUMENT_POSITION_FOLLOWING: {},
                  DOCUMENT_POSITION_CONTAINS: {},
                  DOCUMENT_POSITION_CONTAINED_BY: {},
                  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: {},
                  addEventListener: {},
                  removeEventListener: {},
                  dispatchEvent: {}
            }
      }
      /*
      *
      *
      *     utils
      *
      *
      */
}

module.exports = { window, document } = new Firefox();