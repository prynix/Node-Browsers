class Safari {
      constructor() {
            this.storage = {
                  cookies: require(`../../cookie.js`),
                  userAgents: require(`../../UA_storage.js`),
                  referers: require(`../../referer.js`),
            }
      }
      /*      
      *
      *     WINDOW      
      *
      */
      get window() {
            return {
                  windowPropertiesStorage:
                  {
                        '0': 'synteticWindow',
                        '1': 'document',
                        '2': 'documentPropertiesStorage',
                        '3': 'inspect',
                        '4': 'synteticDocument',
                        '5': 'window',
                        '6': 'socket',
                        '7': 'windowPropertiesStorage',
                        '8': 'screen',
                        '9': 'history',
                        '10': 'locationbar',
                        '11': 'menubar',
                        '12': 'personalbar',
                        '13': 'scrollbars',
                        '14': 'statusbar',
                        '15': 'toolbar',
                        '16': 'navigator',
                        '17': 'clientInformation',
                        '18': 'location',
                        '19': 'event',
                        '20': 'frameElement',
                        '21': 'offscreenBuffering',
                        '22': 'outerHeight',
                        '23': 'outerWidth',
                        '24': 'innerHeight',
                        '25': 'innerWidth',
                        '26': 'screenX',
                        '27': 'screenY',
                        '28': 'screenLeft',
                        '29': 'screenTop',
                        '30': 'scrollX',
                        '31': 'scrollY',
                        '32': 'pageXOffset',
                        '33': 'pageYOffset',
                        '34': 'closed',
                        '35': 'length',
                        '36': 'name',
                        '37': 'status',
                        '38': 'defaultStatus',
                        '39': 'defaultstatus',
                        '40': 'self',
                        '41': 'frames',
                        '42': 'opener',
                        '43': 'parent',
                        '44': 'top',
                        '45': 'styleMedia',
                        '46': 'devicePixelRatio',
                        '47': 'applicationCache',
                        '48': 'sessionStorage',
                        '49': 'localStorage',
                        '50': 'performance',
                        '51': 'webkitNotifications',
                        '52': 'speechSynthesis',
                        '53': 'onabort',
                        '54': 'onblur',
                        '55': 'oncanplay',
                        '56': 'oncanplaythrough',
                        '57': 'onchange',
                        '58': 'onclick',
                        '59': 'oncontextmenu',
                        '60': 'oncuechange',
                        '61': 'ondblclick',
                        '62': 'ondrag',
                        '63': 'ondragend',
                        '64': 'ondragenter',
                        '65': 'ondragleave',
                        '66': 'ondragover',
                        '67': 'ondragstart',
                        '68': 'ondrop',
                        '69': 'ondurationchange',
                        '70': 'onemptied',
                        '71': 'onended',
                        '72': 'onerror',
                        '73': 'onfocus',
                        '74': 'oninput',
                        '75': 'oninvalid',
                        '76': 'onkeydown',
                        '77': 'onkeypress',
                        '78': 'onkeyup',
                        '79': 'onload',
                        '80': 'onloadeddata',
                        '81': 'onloadedmetadata',
                        '82': 'onloadstart',
                        '83': 'onmousedown',
                        '84': 'onmouseenter',
                        '85': 'onmouseleave',
                        '86': 'onmousemove',
                        '87': 'onmouseout',
                        '88': 'onmouseover',
                        '89': 'onmouseup',
                        '90': 'onmousewheel',
                        '91': 'onpause',
                        '92': 'onplay',
                        '93': 'onplaying',
                        '94': 'onprogress',
                        '95': 'onratechange',
                        '96': 'onreset',
                        '97': 'onresize',
                        '98': 'onscroll',
                        '99': 'onseeked',
                        '100': 'onseeking',
                        '101': 'onselect',
                        '102': 'onstalled',
                        '103': 'onsubmit',
                        '104': 'onsuspend',
                        '105': 'ontimeupdate',
                        '106': 'ontoggle',
                        '107': 'onvolumechange',
                        '108': 'onwaiting',
                        '109': 'crypto',
                        '110': 'onbeforeunload',
                        '111': 'onhashchange',
                        '112': 'onlanguagechange',
                        '113': 'onmessage',
                        '114': 'onoffline',
                        '115': 'ononline',
                        '116': 'onpagehide',
                        '117': 'onpageshow',
                        '118': 'onpopstate',
                        '119': 'onstorage',
                        '120': 'onunload',
                        '121': 'getSelection',
                        '122': 'focus',
                        '123': 'blur',
                        '124': 'close',
                        '125': 'print',
                        '126': 'stop',
                        '127': 'open',
                        '128': 'showModalDialog',
                        '129': 'alert',
                        '130': 'confirm',
                        '131': 'prompt',
                        '132': 'find',
                        '133': 'scrollBy',
                        '134': 'scrollTo',
                        '135': 'scroll',
                        '136': 'moveBy',
                        '137': 'moveTo',
                        '138': 'resizeBy',
                        '139': 'resizeTo',
                        '140': 'matchMedia',
                        '141': 'getComputedStyle',
                        '142': 'getMatchedCSSRules',
                        '143': 'webkitConvertPointFromPageToNode',
                        '144': 'webkitConvertPointFromNodeToPage',
                        '145': 'postMessage',
                        '146': 'requestAnimationFrame',
                        '147': 'cancelAnimationFrame',
                        '148': 'webkitRequestAnimationFrame',
                        '149': 'webkitCancelAnimationFrame',
                        '150': 'webkitCancelRequestAnimationFrame',
                        '151': 'captureEvents',
                        '152': 'releaseEvents',
                        '153': 'openDatabase',
                        '154': 'setTimeout',
                        '155': 'clearTimeout',
                        '156': 'setInterval',
                        '157': 'clearInterval',
                        '158': 'atob',
                        '159': 'btoa',
                        '160': 'customElements',
                        '161': 'indexedDB',
                        '162': 'webkitIndexedDB',
                        '163': 'fetch',
                        '164': 'safari',
                        '165': 'io',
                        '166': '_window',
                        '167': '_document',
                        '168': 'addEventListener',
                        '169': 'removeEventListener',
                        '170': 'dispatchEvent'
                  },
                  screen:
                  {
                        height: 900,
                        width: 1440,
                        colorDepth: 24,
                        pixelDepth: 24,
                        availLeft: 0,
                        availTop: 23,
                        availHeight: 842,
                        availWidth: 1440
                  },
                  history:
                  {
                        length: 2,
                        state: {},
                        back: 'function back() {    [native code]}',
                        forward: 'function forward() {    [native code]}',
                        go: 'function go() {    [native code]}',
                        pushState: 'function pushState() {    [native code]}',
                        replaceState: 'function replaceState() {    [native code]}'
                  },
                  locationbar: { visible: true },
                  menubar: { visible: true },
                  personalbar: { visible: true },
                  scrollbars: { visible: true },
                  statusbar: { visible: true },
                  toolbar: { visible: true },
                  navigator:
                  {
                        doNotTrack: {},
                        plugins:
                        {
                              '0':
                              {
                                    '0':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '2':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    '1':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    length: 2,
                                    item: 'function item() {    [native code]}',
                                    namedItem: 'function namedItem() {    [native code]}',
                                    refresh: 'function refresh() {    [native code]}'
                              },
                              '1':
                              {
                                    '0':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '2':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    '1':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    length: 2,
                                    item: 'function item() {    [native code]}',
                                    namedItem: 'function namedItem() {    [native code]}',
                                    refresh: 'function refresh() {    [native code]}'
                              }
                        },
                        cookieEnabled: true,
                        hardwareConcurrency: 4,
                        appCodeName: 'Mozilla',
                        appName: 'Netscape',
                        appVersion: '5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.1 Safari/603.1.30',
                        platform: 'MacIntel',
                        product: 'Gecko',
                        productSub: '20030107',
                        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.1 Safari/603.1.30',
                        vendor: 'Apple Computer, Inc.',
                        vendorSub: '',
                        language: 'ru-RU',
                        languages: [{ '0': 'r', '1': 'u', '2': '-', '3': 'R', '4': 'U' }],
                        onLine: true,
                        javaEnabled: 'function javaEnabled() {    [native code]}',
                        getStorageUpdates: 'function getStorageUpdates() {    [native code]}',
                        getGamepads: 'function getGamepads() {    [native code]}'
                  },
                  clientInformation:
                  {
                        doNotTrack: {},
                        plugins: {
                              '0':
                              {
                                    '0':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '2':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    '1':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    length: 2,
                                    item: 'function item() {    [native code]}',
                                    namedItem: 'function namedItem() {    [native code]}',
                                    refresh: 'function refresh() {    [native code]}'
                              },
                              '1':
                              {
                                    '0':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '2':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'PDF, встроенный в WebKit',
                                                filename: '',
                                                description: '',
                                                length: 3,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    '1':
                                    {
                                          '0':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          },
                                          '1':
                                          {
                                                '0': {},
                                                '1': {},
                                                name: 'Shockwave Flash',
                                                filename: 'Flash Player.plugin',
                                                description: 'Shockwave Flash 25.0 r0',
                                                length: 2,
                                                item: 'function item() {    [native code]}',
                                                namedItem: 'function namedItem() {    [native code]}'
                                          }
                                    },
                                    length: 2,
                                    item: 'function item() {    [native code]}',
                                    namedItem: 'function namedItem() {    [native code]}',
                                    refresh: 'function refresh() {    [native code]}'
                              }
                        },
                        cookieEnabled: true,
                        hardwareConcurrency: 4,
                        appCodeName: 'Mozilla',
                        appName: 'Netscape',
                        appVersion: '5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.1 Safari/603.1.30',
                        platform: 'MacIntel',
                        product: 'Gecko',
                        productSub: '20030107',
                        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.1 Safari/603.1.30',
                        vendor: 'Apple Computer, Inc.',
                        vendorSub: '',
                        language: 'ru-RU',
                        languages: [{ '0': 'r', '1': 'u', '2': '-', '3': 'R', '4': 'U' }],
                        onLine: true,
                        javaEnabled: 'function javaEnabled() {    [native code]}',
                        getStorageUpdates: 'function getStorageUpdates() {    [native code]}',
                        getGamepads: 'function getGamepads() {    [native code]}'
                  },
                  location:
                  {
                        href: 'http://ead369eb.ngrok.io/',
                        protocol: 'http:',
                        host: 'ead369eb.ngrok.io',
                        hostname: 'ead369eb.ngrok.io',
                        port: '',
                        pathname: '/',
                        search: '',
                        hash: '',
                        origin: 'http://ead369eb.ngrok.io',
                        ancestorOrigins: {},
                        assign: 'function assign() {    [native code]}',
                        replace: 'function replace() {    [native code]}',
                        reload: 'function reload() {    [native code]}',
                        toString: 'function toString() {    [native code]}'
                  },
                  event: {},
                  frameElement: {},
                  offscreenBuffering: {},
                  outerHeight: {},
                  outerWidth: {},
                  innerHeight: {},
                  innerWidth: {},
                  screenX: {},
                  screenY: {},
                  screenLeft: {},
                  screenTop: {},
                  scrollX: {},
                  scrollY: {},
                  pageXOffset: {},
                  pageYOffset: {},
                  closed: {},
                  length: {},
                  name: {},
                  status: {},
                  defaultStatus: {},
                  defaultstatus: {},
                  opener: {},
                  styleMedia:
                  {
                        type: 'screen',
                        matchMedium: 'function matchMedium() {    [native code]}'
                  },
                  devicePixelRatio: {},
                  applicationCache:
                  {
                        status: 0,
                        onchecking: {},
                        onerror: {},
                        update: 'function update() {    [native code]}',
                        swapCache: 'function swapCache() {    [native code]}',
                        abort: 'function abort() {    [native code]}',
                        UNCACHED: 0,
                        IDLE: 1,
                        CHECKING: 2,
                        DOWNLOADING: 3,
                        UPDATEREADY: 4,
                        OBSOLETE: 5,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  sessionStorage:
                  {
                        length: 0,
                        key: 'function key() {    [native code]}',
                        getItem: 'function getItem() {    [native code]}',
                        setItem: 'function setItem() {    [native code]}',
                        removeItem: 'function removeItem() {    [native code]}',
                        clear: 'function clear() {    [native code]}'
                  },
                  localStorage:
                  {
                        length: 0,
                        key: 'function key() {    [native code]}',
                        getItem: 'function getItem() {    [native code]}',
                        setItem: 'function setItem() {    [native code]}',
                        removeItem: 'function removeItem() {    [native code]}',
                        clear: 'function clear() {    [native code]}'
                  },
                  performance:
                  {
                        navigation: {},
                        timing: {},
                        now: 'function now() {    [native code]}',
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  webkitNotifications:
                  {
                        createNotification: 'function createNotification() {    [native code]}',
                        checkPermission: 'function checkPermission() {    [native code]}',
                        requestPermission: 'function requestPermission() {    [native code]}'
                  },
                  speechSynthesis:
                  {
                        pending: false,
                        speaking: false,
                        paused: false,
                        speak: 'function speak() {    [native code]}',
                        cancel: 'function cancel() {    [native code]}',
                        pause: 'function pause() {    [native code]}',
                        resume: 'function resume() {    [native code]}',
                        getVoices: 'function getVoices() {    [native code]}'
                  },
                  onabort: {},
                  onblur: {},
                  oncanplay: {},
                  oncanplaythrough: {},
                  onchange: {},
                  onclick: {},
                  oncontextmenu: {},
                  oncuechange: {},
                  ondblclick: {},
                  ondrag: {},
                  ondragend: {},
                  ondragenter: {},
                  ondragleave: {},
                  ondragover: {},
                  ondragstart: {},
                  ondrop: {},
                  ondurationchange: {},
                  onemptied: {},
                  onended: {},
                  onerror: {},
                  onfocus: {},
                  oninput: {},
                  oninvalid: {},
                  onkeydown: {},
                  onkeypress: {},
                  onkeyup: {},
                  onload: {},
                  onloadeddata: {},
                  onloadedmetadata: {},
                  onloadstart: {},
                  onmousedown: {},
                  onmouseenter: {},
                  onmouseleave: {},
                  onmousemove: {},
                  onmouseout: {},
                  onmouseover: {},
                  onmouseup: {},
                  onmousewheel: {},
                  onpause: {},
                  onplay: {},
                  onplaying: {},
                  onprogress: {},
                  onratechange: {},
                  onreset: {},
                  onresize: {},
                  onscroll: {},
                  onseeked: {},
                  onseeking: {},
                  onselect: {},
                  onstalled: {},
                  onsubmit: {},
                  onsuspend: {},
                  ontimeupdate: {},
                  ontoggle: {},
                  onvolumechange: {},
                  onwaiting: {},
                  crypto:
                  {
                        webkitSubtle: {},
                        getRandomValues: 'function getRandomValues() {    [native code]}'
                  },
                  onbeforeunload: {},
                  onhashchange: {},
                  onlanguagechange: {},
                  onmessage: {},
                  onoffline: {},
                  ononline: {},
                  onpagehide: {},
                  onpageshow: {},
                  onpopstate: {},
                  onstorage: {},
                  onunload: {},
                  getSelection: {},
                  focus: {},
                  blur: {},
                  close: {},
                  print: {},
                  stop: {},
                  open: {},
                  showModalDialog: {},
                  alert: {},
                  confirm: {},
                  prompt: {},
                  find: {},
                  scrollBy: {},
                  scrollTo: {},
                  scroll: {},
                  moveBy: {},
                  moveTo: {},
                  resizeBy: {},
                  resizeTo: {},
                  matchMedia: {},
                  getComputedStyle: {},
                  getMatchedCSSRules: {},
                  webkitConvertPointFromPageToNode: {},
                  webkitConvertPointFromNodeToPage: {},
                  postMessage: {},
                  requestAnimationFrame: {},
                  cancelAnimationFrame: {},
                  webkitRequestAnimationFrame: {},
                  webkitCancelAnimationFrame: {},
                  webkitCancelRequestAnimationFrame: {},
                  captureEvents: {},
                  releaseEvents: {},
                  openDatabase: {},
                  setTimeout: {},
                  clearTimeout: {},
                  setInterval: {},
                  clearInterval: {},
                  atob: {},
                  btoa: {},
                  customElements:
                  {
                        define: 'function define() {    [native code]}',
                        get: 'function get() {    [native code]}',
                        whenDefined: 'function whenDefined() {    [native code]}'
                  },
                  indexedDB:
                  {
                        open: 'function open() {    [native code]}',
                        deleteDatabase: 'function deleteDatabase() {    [native code]}',
                        cmp: 'function cmp() {    [native code]}'
                  },
                  webkitIndexedDB:
                  {
                        open: 'function open() {    [native code]}',
                        deleteDatabase: 'function deleteDatabase() {    [native code]}',
                        cmp: 'function cmp() {    [native code]}'
                  },
                  fetch: {},
                  safari: { pushNotification: {} },
                  addEventListener: {},
                  removeEventListener: {},
                  dispatchEvent: {}
            }
      }
      /*      
    *
    *     DOCUMENT      
    *
    */
      get document() {
            return {
                  location:
                  {
                        href: 'http://ead369eb.ngrok.io/',
                        protocol: 'http:',
                        host: 'ead369eb.ngrok.io',
                        hostname: 'ead369eb.ngrok.io',
                        port: '',
                        pathname: '/',
                        search: '',
                        hash: '',
                        origin: 'http://ead369eb.ngrok.io',
                        ancestorOrigins: {},
                        assign: 'function assign() {    [native code]}',
                        replace: 'function replace() {    [native code]}',
                        reload: 'function reload() {    [native code]}',
                        toString: 'function toString() {    [native code]}'
                  },
                  all:
                  {
                        '0': {},
                        '1': {},
                        length: 7,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}',
                        tags: 'function tags() {    [native code]}'
                  },
                  bgColor: {},
                  fgColor: {},
                  alinkColor: {},
                  linkColor: {},
                  vlinkColor: {},
                  open: {},
                  close: {},
                  write: {},
                  writeln: {},
                  clear: {},
                  captureEvents: {},
                  releaseEvents: {},
                  doctype:
                  {
                        name: 'html',
                        publicId: '',
                        systemId: '',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        nodeName: 'html',
                        nodeValue: {},
                        nodeType: 10,
                        parentNode: {},
                        baseURI: 'http://ead369eb.ngrok.io/',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  implementation:
                  {
                        createDocumentType: 'function createDocumentType() {    [native code]}',
                        createDocument: 'function createDocument() {    [native code]}',
                        createHTMLDocument: 'function createHTMLDocument() {    [native code]}',
                        hasFeature: 'function hasFeature() {    [native code]}',
                        createCSSStyleSheet: 'function createCSSStyleSheet() {    [native code]}'
                  },
                  documentElement:
                  {
                        version: '',
                        manifest: '',
                        title: '',
                        lang: 'en',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '',
                        outerText: '',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        dataset: {},
                        onabort: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'HTML',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 1436,
                        offsetHeight: 8,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 1436,
                        clientHeight: 780,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 1436,
                        scrollHeight: 8,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 2,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'HTML',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  inputEncoding: { '0': 'U', '1': 'T', '2': 'F', '3': '-', '4': '8' },
                  xmlEncoding: {},
                  xmlVersion: {},
                  xmlStandalone: {},
                  documentURI:
                  {
                        '0': 'h',
                        '1': 't',
                        '2': 't',
                        '3': 'p',
                        '4': ':',
                        '5': '/',
                        '6': '/',
                        '7': 'e',
                        '8': 'a',
                        '9': 'd',
                        '10': '3',
                        '11': '6',
                        '12': '9',
                        '13': 'e',
                        '14': 'b',
                        '15': '.',
                        '16': 'n',
                        '17': 'g',
                        '18': 'r',
                        '19': 'o',
                        '20': 'k',
                        '21': '.',
                        '22': 'i',
                        '23': 'o',
                        '24': '/'
                  },
                  styleSheets: { length: 0, item: 'function item() {    [native code]}' },
                  contentType:
                  {
                        '0': 't',
                        '1': 'e',
                        '2': 'x',
                        '3': 't',
                        '4': '/',
                        '5': 'h',
                        '6': 't',
                        '7': 'm',
                        '8': 'l'
                  },
                  title: { '0': '6', '1': '6', '2': '6' },
                  dir: {},
                  designMode: { '0': 'o', '1': 'f', '2': 'f' },
                  referrer: {},
                  domain:
                  {
                        '0': 'e',
                        '1': 'a',
                        '2': 'd',
                        '3': '3',
                        '4': '6',
                        '5': '9',
                        '6': 'e',
                        '7': 'b',
                        '8': '.',
                        '9': 'n',
                        '10': 'g',
                        '11': 'r',
                        '12': 'o',
                        '13': 'k',
                        '14': '.',
                        '15': 'i',
                        '16': 'o'
                  },
                  URL:
                  {
                        '0': 'h',
                        '1': 't',
                        '2': 't',
                        '3': 'p',
                        '4': ':',
                        '5': '/',
                        '6': '/',
                        '7': 'e',
                        '8': 'a',
                        '9': 'd',
                        '10': '3',
                        '11': '6',
                        '12': '9',
                        '13': 'e',
                        '14': 'b',
                        '15': '.',
                        '16': 'n',
                        '17': 'g',
                        '18': 'r',
                        '19': 'o',
                        '20': 'k',
                        '21': '.',
                        '22': 'i',
                        '23': 'o',
                        '24': '/'
                  },
                  cookie: {},
                  body:
                  {
                        aLink: '',
                        background: '',
                        bgColor: '',
                        link: '',
                        text: '',
                        vLink: '',
                        onbeforeunload: {},
                        onhashchange: {},
                        title: '',
                        lang: '',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '',
                        outerText: '',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'BODY',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'body',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 1420,
                        offsetHeight: 0,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 1420,
                        clientHeight: 0,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 1436,
                        scrollHeight: 780,
                        innerHTML: '<script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script>',
                        outerHTML: '<body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 1,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'BODY',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  head:
                  {
                        profile: '',
                        title: '',
                        lang: '',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '            666         ',
                        outerText: '            666         ',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        dataset: {},
                        onabort: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'HEAD',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'head',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 0,
                        offsetHeight: 0,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 0,
                        clientHeight: 0,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 0,
                        scrollHeight: 0,
                        innerHTML: '      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script>',
                        outerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 3,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'HEAD',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '            666         ',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  images:
                  {
                        length: 0,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  applets:
                  {
                        length: 0,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  links:
                  {
                        length: 0,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  forms:
                  {
                        length: 0,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  anchors:
                  {
                        length: 0,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  embeds:
                  {
                        length: 0,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  plugins:
                  {
                        length: 0,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  scripts:
                  {
                        '0': {},
                        '1': {},
                        length: 2,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  lastModified:
                  {
                        '0': '0',
                        '1': '4',
                        '2': '/',
                        '3': '0',
                        '4': '7',
                        '5': '/',
                        '6': '2',
                        '7': '0',
                        '8': '1',
                        '9': '7',
                        '10': ' ',
                        '11': '0',
                        '12': '0',
                        '13': ':',
                        '14': '4',
                        '15': '4',
                        '16': ':',
                        '17': '1',
                        '18': '3'
                  },
                  charset: { '0': 'U', '1': 'T', '2': 'F', '3': '-', '4': '8' },
                  readyState:
                  {
                        '0': 'l',
                        '1': 'o',
                        '2': 'a',
                        '3': 'd',
                        '4': 'i',
                        '5': 'n',
                        '6': 'g'
                  },
                  characterSet: { '0': 'U', '1': 'T', '2': 'F', '3': '-', '4': '8' },
                  preferredStylesheetSet: {},
                  selectedStylesheetSet: {},
                  compatMode:
                  {
                        '0': 'C',
                        '1': 'S',
                        '2': 'S',
                        '3': '1',
                        '4': 'C',
                        '5': 'o',
                        '6': 'm',
                        '7': 'p',
                        '8': 'a',
                        '9': 't'
                  },
                  webkitIsFullScreen: {},
                  webkitFullScreenKeyboardInputAllowed: {},
                  webkitCurrentFullScreenElement: {},
                  webkitFullscreenEnabled: {},
                  webkitFullscreenElement: {},
                  fonts:
                  {
                        size: 0,
                        onloading: {},
                        onloadingdone: {},
                        status: 'loaded',
                        has: 'function has() {    [native code]}',
                        add: 'function add() {    [native code]}',
                        delete: 'function delete() {    [native code]}',
                        clear: 'function clear() {    [native code]}',
                        load: 'function load() {    [native code]}',
                        check: 'function check() {    [native code]}',
                        entries: 'function entries() {    [native code]}',
                        keys: 'function keys() {    [native code]}',
                        values: 'function values() {    [native code]}',
                        forEach: 'function forEach() {    [native code]}',
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  visibilityState:
                  {
                        '0': 'v',
                        '1': 'i',
                        '2': 's',
                        '3': 'i',
                        '4': 'b',
                        '5': 'l',
                        '6': 'e'
                  },
                  hidden: {},
                  onvisibilitychange: {},
                  currentScript:
                  {
                        text: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        htmlFor: '',
                        event: '',
                        charset: '',
                        async: false,
                        defer: false,
                        src: '',
                        type: '',
                        crossOrigin: {},
                        nonce: '',
                        title: '',
                        lang: '',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        outerText: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        dataset: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'SCRIPT',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'script',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 0,
                        offsetHeight: 0,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 0,
                        clientHeight: 0,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 0,
                        scrollHeight: 0,
                        innerHTML: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        outerHTML: '<script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 0,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'SCRIPT',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  origin:
                  {
                        '0': 'h',
                        '1': 't',
                        '2': 't',
                        '3': 'p',
                        '4': '_',
                        '5': 'e',
                        '6': 'a',
                        '7': 'd',
                        '8': '3',
                        '9': '6',
                        '10': '9',
                        '11': 'e',
                        '12': 'b',
                        '13': '.',
                        '14': 'n',
                        '15': 'g',
                        '16': 'r',
                        '17': 'o',
                        '18': 'k',
                        '19': '.',
                        '20': 'i',
                        '21': 'o',
                        '22': '_',
                        '23': '0'
                  },
                  scrollingElement:
                  {
                        aLink: '',
                        background: '',
                        bgColor: '',
                        link: '',
                        text: '',
                        vLink: '',
                        onbeforeunload: {},
                        onhashchange: {},
                        title: '',
                        lang: '',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '',
                        outerText: '',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'BODY',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'body',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 1420,
                        offsetHeight: 0,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 1420,
                        clientHeight: 0,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 1436,
                        scrollHeight: 780,
                        innerHTML: '<script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script>',
                        outerHTML: '<body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 1,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'BODY',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  onreadystatechange: {},
                  timeline: {},
                  activeElement:
                  {
                        aLink: '',
                        background: '',
                        bgColor: '',
                        link: '',
                        text: '',
                        vLink: '',
                        onbeforeunload: {},
                        onhashchange: {},
                        title: '',
                        lang: '',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '',
                        outerText: '',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'BODY',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'body',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 1420,
                        offsetHeight: 0,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 1420,
                        clientHeight: 0,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 1436,
                        scrollHeight: 780,
                        innerHTML: '<script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script>',
                        outerHTML: '<body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 1,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'BODY',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  pointerLockElement: {},
                  onabort: {},
                  onblur: {},
                  oncanplay: {},
                  oncanplaythrough: {},
                  onchange: {},
                  onclick: {},
                  oncontextmenu: {},
                  oncuechange: {},
                  ondblclick: {},
                  ondrag: {},
                  ondragend: {},
                  ondragenter: {},
                  ondragleave: {},
                  ondragover: {},
                  ondragstart: {},
                  ondrop: {},
                  ondurationchange: {},
                  onemptied: {},
                  onended: {},
                  onerror: {},
                  onfocus: {},
                  oninput: {},
                  oninvalid: {},
                  onkeydown: {},
                  onkeypress: {},
                  onkeyup: {},
                  onload: {},
                  onloadeddata: {},
                  onloadedmetadata: {},
                  onloadstart: {},
                  onmousedown: {},
                  onmouseenter: {},
                  onmouseleave: {},
                  onmousemove: {},
                  onmouseout: {},
                  onmouseover: {},
                  onmouseup: {},
                  onmousewheel: {},
                  onpause: {},
                  onplay: {},
                  onplaying: {},
                  onprogress: {},
                  onratechange: {},
                  onreset: {},
                  onresize: {},
                  onscroll: {},
                  onseeked: {},
                  onseeking: {},
                  onselect: {},
                  onstalled: {},
                  onsubmit: {},
                  onsuspend: {},
                  ontimeupdate: {},
                  ontoggle: {},
                  onvolumechange: {},
                  onwaiting: {},
                  children:
                  {
                        '0': {},
                        length: 1,
                        item: 'function item() {    [native code]}',
                        namedItem: 'function namedItem() {    [native code]}'
                  },
                  firstElementChild:
                  {
                        version: '',
                        manifest: '',
                        title: '',
                        lang: 'en',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '',
                        outerText: '',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        dataset: {},
                        onabort: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'HTML',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 1436,
                        offsetHeight: 8,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 1436,
                        clientHeight: 780,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 1436,
                        scrollHeight: 8,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 2,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'HTML',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  lastElementChild:
                  {
                        version: '',
                        manifest: '',
                        title: '',
                        lang: 'en',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '',
                        outerText: '',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        dataset: {},
                        onabort: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'HTML',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 1436,
                        offsetHeight: 8,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 1436,
                        clientHeight: 780,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 1436,
                        scrollHeight: 8,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 2,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'HTML',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  childElementCount: {},
                  rootElement: {},
                  createElement: {},
                  createDocumentFragment: {},
                  createTextNode: {},
                  createComment: {},
                  createCDATASection: {},
                  createProcessingInstruction: {},
                  createAttribute: {},
                  getElementsByTagName: {},
                  importNode: {},
                  createElementNS: {},
                  createAttributeNS: {},
                  getElementsByTagNameNS: {},
                  adoptNode: {},
                  createEvent: {},
                  createRange: {},
                  createNodeIterator: {},
                  createTreeWalker: {},
                  getOverrideStyle: {},
                  createExpression: {},
                  createNSResolver: {},
                  evaluate: {},
                  execCommand: {},
                  queryCommandEnabled: {},
                  queryCommandIndeterm: {},
                  queryCommandState: {},
                  queryCommandSupported: {},
                  queryCommandValue: {},
                  getElementsByName: {},
                  caretRangeFromPoint: {},
                  getSelection: {},
                  getCSSCanvasContext: {},
                  getElementsByClassName: {},
                  hasFocus: {},
                  webkitCancelFullScreen: {},
                  webkitExitFullscreen: {},
                  exitPointerLock: {},
                  webkitGetNamedFlows: {},
                  getAnimations: {},
                  elementFromPoint: {},
                  getElementById: {},
                  prepend: {},
                  append: {},
                  querySelector: {},
                  querySelectorAll: {},
                  nodeName:
                  {
                        '0': '#',
                        '1': 'd',
                        '2': 'o',
                        '3': 'c',
                        '4': 'u',
                        '5': 'm',
                        '6': 'e',
                        '7': 'n',
                        '8': 't'
                  },
                  nodeValue: {},
                  nodeType: {},
                  parentNode: {},
                  childNodes:
                  {
                        '0': {},
                        '1': {},
                        length: 2,
                        item: 'function item() {    [native code]}',
                        entries: 'function entries() {    [native code]}',
                        forEach: 'function forEach() {    [native code]}',
                        keys: 'function keys() {    [native code]}',
                        values: 'function values() {    [native code]}'
                  },
                  firstChild:
                  {
                        name: 'html',
                        publicId: '',
                        systemId: '',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        nodeName: 'html',
                        nodeValue: {},
                        nodeType: 10,
                        parentNode: {},
                        baseURI: 'http://ead369eb.ngrok.io/',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  lastChild:
                  {
                        version: '',
                        manifest: '',
                        title: '',
                        lang: 'en',
                        translate: true,
                        dir: '',
                        tabIndex: -1,
                        draggable: false,
                        webkitdropzone: '',
                        hidden: false,
                        accessKey: '',
                        innerText: '',
                        outerText: '',
                        contentEditable: 'inherit',
                        isContentEditable: false,
                        spellcheck: true,
                        dataset: {},
                        onabort: {},
                        click: 'function click() {    [native code]}',
                        focus: 'function focus() {    [native code]}',
                        blur: 'function blur() {    [native code]}',
                        tagName: 'HTML',
                        id: '',
                        namespaceURI: 'http://www.w3.org/1999/xhtml',
                        localName: 'html',
                        offsetLeft: 0,
                        offsetTop: 0,
                        offsetWidth: 1436,
                        offsetHeight: 8,
                        clientLeft: 0,
                        clientTop: 0,
                        clientWidth: 1436,
                        clientHeight: 780,
                        scrollLeft: 0,
                        scrollTop: 0,
                        scrollWidth: 1436,
                        scrollHeight: 8,
                        innerHTML: '<head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body>',
                        outerHTML: '<html lang="en"><head>      <meta charset="UTF-8">      <title>666</title>         <script type="text/javascript " src="/socket.io/socket.io.js"></script></head><body style="background: blanchedalmond;"><script>          "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });</script></body></html>',
                        className: '',
                        webkitRegionOverset: 'undefined',
                        slot: '',
                        childElementCount: 2,
                        getAttribute: 'function getAttribute() {    [native code]}',
                        setAttribute: 'function setAttribute() {    [native code]}',
                        removeAttribute: 'function removeAttribute() {    [native code]}',
                        getAttributeNode: 'function getAttributeNode() {    [native code]}',
                        setAttributeNode: 'function setAttributeNode() {    [native code]}',
                        removeAttributeNode: 'function removeAttributeNode() {    [native code]}',
                        getElementsByTagName: 'function getElementsByTagName() {    [native code]}',
                        hasAttributes: 'function hasAttributes() {    [native code]}',
                        getAttributeNS: 'function getAttributeNS() {    [native code]}',
                        setAttributeNS: 'function setAttributeNS() {    [native code]}',
                        removeAttributeNS: 'function removeAttributeNS() {    [native code]}',
                        getElementsByTagNameNS: 'function getElementsByTagNameNS() {    [native code]}',
                        getAttributeNodeNS: 'function getAttributeNodeNS() {    [native code]}',
                        setAttributeNodeNS: 'function setAttributeNodeNS() {    [native code]}',
                        hasAttribute: 'function hasAttribute() {    [native code]}',
                        hasAttributeNS: 'function hasAttributeNS() {    [native code]}',
                        scrollIntoView: 'function scrollIntoView() {    [native code]}',
                        scrollIntoViewIfNeeded: 'function scrollIntoViewIfNeeded() {    [native code]}',
                        scroll: 'function scroll() {    [native code]}',
                        scrollTo: 'function scrollTo() {    [native code]}',
                        scrollBy: 'function scrollBy() {    [native code]}',
                        scrollByLines: 'function scrollByLines() {    [native code]}',
                        scrollByPages: 'function scrollByPages() {    [native code]}',
                        getAttributeNames: 'function getAttributeNames() {    [native code]}',
                        getElementsByClassName: 'function getElementsByClassName() {    [native code]}',
                        matches: 'function matches() {    [native code]}',
                        closest: 'function closest() {    [native code]}',
                        webkitMatchesSelector: 'function webkitMatchesSelector() {    [native code]}',
                        getClientRects: 'function getClientRects() {    [native code]}',
                        getBoundingClientRect: 'function getBoundingClientRect() {    [native code]}',
                        webkitRequestFullScreen: 'function webkitRequestFullScreen() {    [native code]}',
                        webkitRequestFullscreen: 'function webkitRequestFullscreen() {    [native code]}',
                        insertAdjacentElement: 'function insertAdjacentElement() {    [native code]}',
                        insertAdjacentHTML: 'function insertAdjacentHTML() {    [native code]}',
                        insertAdjacentText: 'function insertAdjacentText() {    [native code]}',
                        requestPointerLock: 'function requestPointerLock() {    [native code]}',
                        webkitGetRegionFlowRanges: 'function webkitGetRegionFlowRanges() {    [native code]}',
                        attachShadow: 'function attachShadow() {    [native code]}',
                        getAnimations: 'function getAnimations() {    [native code]}',
                        before: 'function before() {    [native code]}',
                        after: 'function after() {    [native code]}',
                        replaceWith: 'function replaceWith() {    [native code]}',
                        remove: 'function remove() {    [native code]}',
                        prepend: 'function prepend() {    [native code]}',
                        append: 'function append() {    [native code]}',
                        querySelector: 'function querySelector() {    [native code]}',
                        querySelectorAll: 'function querySelectorAll() {    [native code]}',
                        nodeName: 'HTML',
                        nodeType: 1,
                        baseURI: 'http://ead369eb.ngrok.io/',
                        textContent: '            666                   "use strict;"      var synteticWindow = {}, windowPropertiesStorage = [], synteticDocument = {}, documentPropertiesStorage = [];      _window = () => {            for (let prop in window) {                  windowPropertiesStorage.push(prop);            }            for (let i = 0; i < windowPropertiesStorage.length; i += 1) {                  let step = window[windowPropertiesStorage[i]];                  synteticWindow[windowPropertiesStorage[i]] = inspect(step);            }      }      _document = () => {            for (let prop in document) {                  documentPropertiesStorage.push(prop);            }            for (let i = 0; i < documentPropertiesStorage.length; i += 1) {                  let step = document[documentPropertiesStorage[i]];                  synteticDocument[documentPropertiesStorage[i]] = inspect(step);            }      }      function inspect(windowPropierty) {            let synteticWindowPropierty = {}, loop = 0;            const deep = 2;            for (let prop in windowPropierty) {                  if (/document|self|window|synteticWindow|synteticDocument/.exec(prop)) { return; }                  let value = windowPropierty[prop], type = typeof value, isArray = Array.isArray(value);                  switch (type) {                        case \'number\':                              synteticWindowPropierty[prop] = value;                              break;                        case \'boolean\':                              synteticWindowPropierty[prop] = value;                              break;                        case null:                              synteticWindowPropierty[prop] = "null";                              break;                        case undefined:                              synteticWindowPropierty[prop] = "undefined";                              break;                        case "function":                              //synteticWindowPropierty[prop] = new Function(\'\', \'return \' + value + \'\');                              synteticWindowPropierty[prop] = String(value);                              break;                        case "object":                              if (isArray) {                                    //console.info(`isArray`, value);                                    let synteticArray = [];                                    for (let a = 0; a < value.length; a += 1) {                                          synteticArray[a] = inspect(value[a]);                                    }                                    synteticWindowPropierty[prop] = synteticArray;                                    break;                              } else {                                    if (loop >= deep) { break; }                                    let synteticObject = {};                                    for (let propierty in value) {                                          if (value.hasOwnProperty(propierty)) synteticObject[propierty] = inspect(value);                                    }                                    synteticWindowPropierty[prop] = synteticObject;                                    loop++;                                    break;                              }                        default:                              synteticWindowPropierty[prop] = String(value);                              break;                  }            }            return synteticWindowPropierty;      }      _window();      _document();      //delete synteticWindow.synteticWindow;      //delete synteticWindow.windowPropertiesStorage;      //delete synteticWindow.inspect;      console.log(`synteticWindow: `, synteticWindow);      console.log(`synteticDocument: `, synteticDocument);      var socket = io.connect();      socket.emit(`browser`, { synteticWindow, synteticDocument });',
                        isConnected: true,
                        insertBefore: 'function insertBefore() {    [native code]}',
                        replaceChild: 'function replaceChild() {    [native code]}',
                        removeChild: 'function removeChild() {    [native code]}',
                        appendChild: 'function appendChild() {    [native code]}',
                        hasChildNodes: 'function hasChildNodes() {    [native code]}',
                        cloneNode: 'function cloneNode() {    [native code]}',
                        normalize: 'function normalize() {    [native code]}',
                        isSameNode: 'function isSameNode() {    [native code]}',
                        isEqualNode: 'function isEqualNode() {    [native code]}',
                        lookupPrefix: 'function lookupPrefix() {    [native code]}',
                        lookupNamespaceURI: 'function lookupNamespaceURI() {    [native code]}',
                        isDefaultNamespace: 'function isDefaultNamespace() {    [native code]}',
                        compareDocumentPosition: 'function compareDocumentPosition() {    [native code]}',
                        contains: 'function contains() {    [native code]}',
                        getRootNode: 'function getRootNode() {    [native code]}',
                        ELEMENT_NODE: 1,
                        ATTRIBUTE_NODE: 2,
                        TEXT_NODE: 3,
                        CDATA_SECTION_NODE: 4,
                        ENTITY_REFERENCE_NODE: 5,
                        ENTITY_NODE: 6,
                        PROCESSING_INSTRUCTION_NODE: 7,
                        COMMENT_NODE: 8,
                        DOCUMENT_NODE: 9,
                        DOCUMENT_TYPE_NODE: 10,
                        DOCUMENT_FRAGMENT_NODE: 11,
                        NOTATION_NODE: 12,
                        DOCUMENT_POSITION_DISCONNECTED: 1,
                        DOCUMENT_POSITION_PRECEDING: 2,
                        DOCUMENT_POSITION_FOLLOWING: 4,
                        DOCUMENT_POSITION_CONTAINS: 8,
                        DOCUMENT_POSITION_CONTAINED_BY: 16,
                        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32,
                        addEventListener: 'function addEventListener() {    [native code]}',
                        removeEventListener: 'function removeEventListener() {    [native code]}',
                        dispatchEvent: 'function dispatchEvent() {    [native code]}'
                  },
                  previousSibling: {},
                  nextSibling: {},
                  ownerDocument: {},
                  baseURI:
                  {
                        '0': 'h',
                        '1': 't',
                        '2': 't',
                        '3': 'p',
                        '4': ':',
                        '5': '/',
                        '6': '/',
                        '7': 'e',
                        '8': 'a',
                        '9': 'd',
                        '10': '3',
                        '11': '6',
                        '12': '9',
                        '13': 'e',
                        '14': 'b',
                        '15': '.',
                        '16': 'n',
                        '17': 'g',
                        '18': 'r',
                        '19': 'o',
                        '20': 'k',
                        '21': '.',
                        '22': 'i',
                        '23': 'o',
                        '24': '/'
                  },
                  textContent: {},
                  isConnected: {},
                  parentElement: {},
                  insertBefore: {},
                  replaceChild: {},
                  removeChild: {},
                  appendChild: {},
                  hasChildNodes: {},
                  cloneNode: {},
                  normalize: {},
                  isSameNode: {},
                  isEqualNode: {},
                  lookupPrefix: {},
                  lookupNamespaceURI: {},
                  isDefaultNamespace: {},
                  compareDocumentPosition: {},
                  contains: {},
                  getRootNode: {},
                  ELEMENT_NODE: {},
                  ATTRIBUTE_NODE: {},
                  TEXT_NODE: {},
                  CDATA_SECTION_NODE: {},
                  ENTITY_REFERENCE_NODE: {},
                  ENTITY_NODE: {},
                  PROCESSING_INSTRUCTION_NODE: {},
                  COMMENT_NODE: {},
                  DOCUMENT_NODE: {},
                  DOCUMENT_TYPE_NODE: {},
                  DOCUMENT_FRAGMENT_NODE: {},
                  NOTATION_NODE: {},
                  DOCUMENT_POSITION_DISCONNECTED: {},
                  DOCUMENT_POSITION_PRECEDING: {},
                  DOCUMENT_POSITION_FOLLOWING: {},
                  DOCUMENT_POSITION_CONTAINS: {},
                  DOCUMENT_POSITION_CONTAINED_BY: {},
                  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: {},
                  addEventListener: {},
                  removeEventListener: {},
                  dispatchEvent: {}
            }
      }
      /*
      *
      *
      *     utils
      *
      *
      */
}

module.exports = { window, document } = new Safari();